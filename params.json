{
  "name": "Marshmallowpermissionmanager",
  "tagline": "Helper to ask permission on android marshmallow",
  "body": "# PermissionHelper\r\n\r\n[![Platform (Android)](https://img.shields.io/badge/platform-Android-blue.svg?style=flat-square)](http://www.android.com)\r\n[![ Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-MarshmallowPermissionManager-green.svg?style=true)](https://android-arsenal.com/details/1/3234)\r\n[![GitHub license](https://img.shields.io/github/license/mashape/apistatus.svg)](https://github.com/RurioLuca/MarshmallowPermissionManager/blob/master/License)\r\n[![Codewake](https://www.codewake.com/badges/ask_question_flat_square.svg)](https://www.codewake.com/p/marshmallowpermissionmanager)\r\n[ ![Download](https://api.bintray.com/packages/auron/maven/permission-manage/images/download.svg) ](https://bintray.com/auron/maven/permission-manage/_latestVersion) \r\n[![API](https://img.shields.io/badge/API-9%2B-brightgreen.svg?style=flat)](https://android-arsenal.com/api?level=9)\r\n [![GitHub stars](https://img.shields.io/github/stars/RurioLuca/MarshmallowPermissionManager.svg)](https://github.com/RurioLuca/MarshmallowPermissionManager/stargazers)\r\n\r\n\r\n#### Helper to ask runtime permission on android marshmallow and nougat\r\n\r\n\r\nThe library takes care themselves to check whether a permit has already been agreed by the user or not.\r\nif the user has given consent call the system dialog for the acceptance\r\n\r\n![Screen](https://raw.githubusercontent.com/RurioLuca/MarshmallowPermissionManager/master/img/permission.jpg)\r\n\r\n### Requirements\r\n\r\nThe library requires Android **API Level 9+**.\r\n\r\n\r\n### Import\r\n\r\nin build.gradle\r\n\r\n```Gradle\r\nallprojects {\r\n    repositories {\r\n        jcenter()\r\n    }\r\n}\r\n\r\n```\r\n```Gradle\r\ndependencies {\r\n compile 'com.auron:permission-manage:1.1.5'\r\n}\r\n```\r\n\r\n### How to use\r\n\r\n#### Activity\r\n\r\nActivity extends ActivityManagePermission\r\n\r\n```java\r\n\r\npublic class MainActivity extends ActivityManagePermission {\r\n\r\n}\r\n```\r\n\r\nsample usage to ask camera permission\r\n\r\n\r\n\r\n```java\r\n  askCompactPermission(PermissionUtils.Manifest_CAMERA, new PermissionResult() {\r\n                    @Override\r\n                    public void permissionGranted() {\r\n                        //permission granted\r\n                        //replace with your action\r\n                    }\r\n\r\n                    @Override\r\n                    public void permissionDenied() {\r\n                        //permission denied\r\n                        //replace with your action\r\n                    }\r\n                       @Override\r\n                    public void permissionForeverDenied() {\r\n                     // user has check never ask again\r\n                     // you need to open setting manually\r\n                     //  Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);\r\n                     //  Uri uri = Uri.fromParts(\"package\", getPackageName(), null);\r\n                     //   intent.setData(uri);\r\n                     //  startActivityForResult(intent, REQUEST_PERMISSION_SETTING); \r\n                    }\r\n                });\r\n```\r\n\r\n#### Fragment\r\n\r\nFragmentHome extends FragmentManagePermission\r\n\r\n```java\r\n\r\npublic class FragmentHome extends FragmentManagePermission {\r\n\r\n}\r\n```\r\n\r\nsample usage to ask camera permission\r\n\r\n\r\n```java\r\n  askCompactPermission(PermissionUtils.Manifest_CAMERA, new PermissionResult() {\r\n                    @Override\r\n                    public void permissionGranted() {\r\n                        //permission granted\r\n                        //replace with your action\r\n                    }\r\n\r\n                    @Override\r\n                    public void permissionDenied() {\r\n                        //permission denied\r\n                        //replace with your action\r\n                    }\r\n                     @Override\r\n                    public void permissionForeverDenied() {\r\n                     // user has check never ask again\r\n                     // you need to open setting manually\r\n                     //  Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);\r\n                     //  Uri uri = Uri.fromParts(\"package\", getPackageName(), null);\r\n                     //   intent.setData(uri);\r\n                     //  startActivityForResult(intent, REQUEST_PERMISSION_SETTING); \r\n                    }\r\n                });\r\n```\r\n\r\n# Advance Usage\r\n\r\n#### check whether a permit has been agreed\r\n\r\n```java\r\nboolean isGranted = isPermissionGranted(MainActivity.this,PermissionUtils.Manifest_WRITE_EXTERNAL_STORAGE);\r\n```\r\n\r\n#### check whether multiple permission has been agreed\r\n\r\n```java\r\nboolean isGranted = isPermissionsGranted(MainActivity.this,new String[]{PermissionUtils.Manifest_WRITE_EXTERNAL_STORAGE,PermissionUtils.Manifest_CAMERA});\r\n```\r\n\r\n#### PermissionUtils\r\n\r\nThe permission class utils contains the permissions you need to ask runtime\r\n\r\n### Multiple Permissions\r\n\r\n\r\n```java\r\n  askCompactPermissions(new String[]{PermissionUtils.Manifest_CAMERA, PermissionUtils.Manifest_WRITE_EXTERNAL_STORAGE}, new PermissionResult() {\r\n            @Override\r\n            public void permissionGranted() {\r\n                //permission granted\r\n                //replace with your action\r\n            }\r\n\r\n            @Override\r\n            public void permissionDenied() {\r\n                //permission denied\r\n                //replace with your action\r\n            }\r\n             @Override\r\n                    public void permissionForeverDenied() {\r\n                     // user has check 'never ask again'\r\n                     // you need to open setting manually\r\n                     //  Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);\r\n                     //  Uri uri = Uri.fromParts(\"package\", getPackageName(), null);\r\n                     //   intent.setData(uri);\r\n                     //  startActivityForResult(intent, REQUEST_PERMISSION_SETTING); \r\n                    }\r\n        });\r\n```\r\n### Group Permissions\r\n\r\n\r\n```java\r\n  askCompactPermission(PermissionUtils.Manifest_GROUP_STORAGE, PermissionUtils.Manifest_WRITE_EXTERNAL_STORAGE}, new PermissionResult() {\r\n            @Override\r\n            public void permissionGranted() {\r\n                //permission granted\r\n                //replace with your action\r\n            }\r\n\r\n            @Override\r\n            public void permissionDenied() {\r\n                //permission denied\r\n                //replace with your action\r\n            }\r\n             @Override\r\n                    public void permissionForeverDenied() {\r\n                     // user has check 'never ask again'\r\n                     // you need to open setting manually\r\n                     //  Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);\r\n                     //  Uri uri = Uri.fromParts(\"package\", getPackageName(), null);\r\n                     //   intent.setData(uri);\r\n                     //  startActivityForResult(intent, REQUEST_PERMISSION_SETTING); \r\n                    }\r\n        });\r\n```\r\n#### Open Setting Application\r\n\r\nneed class extend FragmentManagePermission or ActivityManagePermission\r\n\r\n```java\r\n\r\n openSettingsApp(MainActivity.this);\r\n\r\n```\r\n###Javadoc\r\n[Javadoc](http://rurioluca.github.io/MarshmallowPermissionManager/javadoc/) thanks to [rebus007](https://github.com/rebus007)\r\n\r\n\r\n###Developed By\r\nRurio Luca- [rurio.luca@gmail.com](mailto:rurio.luca@gmail.com)\r\n\r\n[![Linkedin](https://raw.githubusercontent.com/RurioLuca/MarshmallowPermissionManager/master/img/social/linkedin-icon.png) ](https://it.linkedin.com/in/luca-rurio-5a4462107)\r\n\r\n###App using MarshmallowPermissionManager\r\n=======\r\n\r\n  * [Material Qr](https://play.google.com/store/apps/details?id=qrreader.com.studios.it.qrreader)\r\n  * [Volo](https://play.google.com/store/apps/details?id=volo.tsc.it.volo)\r\n  * [Volo Oss](https://play.google.com/store/apps/details?id=volontario.volo.tsc.it.volontario)\r\n  * [Gespat](https://play.google.com/store/apps/details?id=gespat.tsc.it.gespat)\r\n\r\nsend me your apps!\r\nrurio.luca@gmail.com\r\n\r\n# License\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2016 Rurio Luca\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}